# discord_bot.py

import os
import discord
import asyncio  # Importa a biblioteca para tarefas ass√≠ncronas
from dotenv import load_dotenv
from rag_chatbot_logic import RAGChatbot

# Carregar vari√°veis de ambiente, incluindo o token do bot
load_dotenv()
TOKEN = os.getenv('DISCORD_TOKEN')

# --- Configura√ß√£o do Bot do Discord ---
intents = discord.Intents.default()
intents.message_content = True  # Ativa a permiss√£o para ler o conte√∫do das mensagens
bot = discord.Client(intents=intents)

# Cria uma inst√¢ncia da nossa l√≥gica de chatbot
# Os modelos pesados s√£o carregados apenas uma vez, quando o bot inicia.
print("Iniciando o bot do Discord...")
chatbot = RAGChatbot()

@bot.event
async def on_ready():
    """Evento que √© chamado quando o bot se conecta com sucesso ao Discord."""
    print('-----------------------------------------')
    print(f'Logado com sucesso como {bot.user}')
    print('O bot est√° online e pronto para responder!')
    print('Me mencione em um canal para come√ßar a conversar (ex: @MeuBot qual a build do Jhin?).')
    print('-----------------------------------------')

@bot.event
async def on_message(message):
    """Evento que √© chamado sempre que uma mensagem √© enviada em um canal que o bot pode ver."""
    # 1. Ignora mensagens enviadas pelo pr√≥prio bot para evitar loops infinitos
    if message.author == bot.user:
        return

    # 2. Verifica se o bot foi mencionado na mensagem
    if bot.user.mentioned_in(message):
        
        # 3. Limpa a men√ß√£o da mensagem para obter a pergunta real do usu√°rio
        query = message.content.replace(f'<@{bot.user.id}>', '').strip()

        if not query:
            await message.channel.send("Ol√°! Fa√ßa-me uma pergunta sobre League of Legends.")
            return
        
        # ID do canal para manter hist√≥ricos de conversa separados
        channel_id = str(message.channel.id)

        # 4. Envia uma mensagem "Pensando..." para o usu√°rio saber que o bot est√° trabalhando
        thinking_message = await message.channel.send("üß† Analisando os dados do Reddit...")

        try:
            # 5. [CORRE√á√ÉO] Executa a fun√ß√£o demorada em uma thread separada para n√£o bloquear o bot
            answer = await asyncio.to_thread(chatbot.get_response, channel_id, query)
            
            # 6. Edita a mensagem "Pensando..." com a resposta final
            await thinking_message.edit(content=answer)

        except Exception as e:
            print(f"Ocorreu um erro ao processar a pergunta: {e}")
            # Envia uma mensagem de erro mais detalhada no Discord
            await thinking_message.edit(content=f"Desculpe, ocorreu um erro ao processar sua pergunta.")

# --- Ponto de partida ---
if __name__ == "__main__":
    if not TOKEN:
        print("ERRO: O DISCORD_TOKEN n√£o foi encontrado no arquivo .env!")
    else:
        # Inicia o bot usando o token
        bot.run(TOKEN)